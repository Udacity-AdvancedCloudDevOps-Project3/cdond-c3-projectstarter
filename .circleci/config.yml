version: 2.1

orbs:
  slack: circleci/slack@4.10.1

# parameters:
#   workflow_id:
#     type: string
#     default: ${CIRCLE_WORKFLOW_ID:0:7}

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            # exit 1
            ### Check
            echo -e "\n"
            echo "parameters.workflow_id is:"
            echo -e "===================================="
            echo << parameters.workflow_id >>
            echo -e "===================================="
            echo -e "\n"
            echo 'CIRCLE_WORKFLOW_ID:0:7 is:'
            echo -e "===================================="
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo -e "===================================="

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here
    parameters:
      workflow_id:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS = 1
            ### Example: Memstash.io
            # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            ### Example: kvdb.io
            # SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
            SUCCESS=$(curl --insecure  https://kvdb.io/MhG41XSXetM5VomuRkWZea/migration_<< parameters.workflow_id >>)
            ### Logic for reverting the database state
            if (( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              # exit 1
            fi

  notify_on_failure:
    description: Send SLACK notification on failure
    ### docker not allowed 
    # docker:
    #   - image: cimg/base:stable
    steps:
      - slack/notify:
          event: fail
          channel: udacity-advancedclouddevops-project3
          template: basic_fail_1

  notify_on_success:
    description: Send SLACK notification on Success using success_tagged_deploy_1 template
    # docker:
    #   - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: udacity-advancedclouddevops-project3
          ### template does not exist
          # template: success_tagged_deployment_1
          template: success_tagged_deploy_1
  
  notify_on_success_2:
    description: Send SLACK notification on Success using basic_success_1 template
    steps:
      - slack/notify:
          event: pass
          channel: udacity-advancedclouddevops-project3
          template: basic_success_1

######################################################
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Change directory to frontend, install npm modules, and build frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_success
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Change directory to backend, install npm modules, and build backend
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_success
      - notify_on_failure

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Change directory to frontend, and Run Unit test
          command: |
            cd frontend
            npm run test
      - notify_on_success
      - notify_on_failure

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Change directory to backend, and Run Unit test
          command: |
            cd backend
            npm run test
      - notify_on_success
      - notify_on_failure

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Change directory to frontend, and run Analyze audit security test 
          command: |
            cd frontend
            ### to fix frontend Analyze audit security test We add next line
            # sudo npm install npm@latest -g
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_success
      - notify_on_failure

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Change directory to backend, and run Analyze audit security test
          command: |
            cd backend
            ### to fix backend nalyze audit security test We add next line
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_success
      - notify_on_failure

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name=udapeople-backend-zakarya \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name=udapeople-frontend-zakarya \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            INSTANCEIP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text); echo $INSTANCEIP  >> ~/project/.circleci/ansible/inventory.txt
            ### check file contents
            echo "Instance IP is:"
            echo $INSTANCEIP
            echo -e "\n"
            echo "inventory.txt contents are"
            echo -e "===================================="
            cat ~/project/.circleci/ansible/inventory.txt
            echo -e "===================================="

            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - run:
      #     name: faile the job test destroy-environment command
      #     command: | 
      #         yum installllllllllllllll-FAIL-llllllllllllllllllllllll -y tar gzip
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
      # - image: ubuntu
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
        # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["11:53:17:01:57:4c:ec:06:6c:e5:27:10:4f:37:ef:ae"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # Install Ansible
            ### next line not installing aws command
            ### apk add --update ansible tar gzip aws-cli
            # apt-get update && apt-get install \
            # python3 \
            # py3-pip \
            # openssh-client \
            # openssh \
            apk add --no-cache \
            ansible \
            tar \
            gzip \
            curl \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir awscli \
            && rm -rf /var/cache/apk/*
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook .circleci/ansible/configure-server.yml -i ~/project/.circleci/ansible/inventory.txt
            ### If timeout then test connection while instance is running using:
            ### $ ansible web -i inventory.txt -m ping
            ### check user user with the ami 
            ### check firewalls
            # exit 1
            ### Check
            echo -e "\n"
            echo "Check the env var TYPEORM_ENTITIES value:"
            echo -e "===================================="
            echo $TYPEORM_ENTITIES
            echo -e "===================================="
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

  ### Make sue that the database security group is allowing access to the database port
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      ### Restore backend cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install commands on based Debian container
          command: |
            sudo apt-get update
            sudo apt-get -y install curl tar gzip
            sudo apt -y install python3 python3-pip
            sudo pip3 install --upgrade pip
            sudo pip3 install awscli
            sudo pip3 install awscli --upgrade
            sudo pip3 install ansible
            sudo apt autoremove
      - run:
          name: install typescript in the container
          command: |
            sudo npm install ts-node typescript -g
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > ~/project/backend/migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to kvdb.io not memstash
          command: |
            # Your code here
            # if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            # if grep -q "success" ~/project/backend/migrations_dump.txt
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              # curl https://kvdb.io/MhG41XSXetM5VomuRkWZea/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
              curl --insecure https://kvdb.io/MhG41XSXetM5VomuRkWZea/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            ### Checks
            echo -e "\n"
            echo "The contents of the file ~/project/backend/migrations_dump.txt are:"
            echo -e "===================================="
            cat ~/project/backend/migrations_dump.txt
            echo -e "===================================="
            echo -e "\n"
            echo "Grepping for 'No migrations are pending' in the file ~/project/backend/migrations_dump.txt"
            grep -i "No migrations are pending" ~/project/backend/migrations_dump.txt
            echo -e "\n"
            echo "Check the value sent to kvdb.io:"
            echo -e "===================================="
            curl --insecure  https://kvdb.io/MhG41XSXetM5VomuRkWZea/migration_${CIRCLE_WORKFLOW_ID:0:7}; echo
            echo -e "===================================="
            echo -e "\n"
            # exit 1
      ### save backend cache
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update
            sudo apt-get -y install curl tar gzip
            sudo apt -y install python3 python3-pip
            sudo pip3 install --upgrade pip
            sudo pip3 install awscli
            sudo pip3 install awscli --upgrade
            sudo pip3 install ansible --upgrade
            sudo apt autoremove
      - run:
          name: Get backend url
          command: |
            # your code here
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "${API_URL}"
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> ~/project/frontend/.env
            cat ~/project/frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.7-alpine3.11
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["11:53:17:01:57:4c:ec:06:6c:e5:27:10:4f:37:ef:ae"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update
            sudo apt-get -y install curl tar gzip
            sudo apt -y install python3 python3-pip
            sudo pip3 install --upgrade pip
            sudo pip3 install awscli
            sudo pip3 install awscli --upgrade
            sudo pip3 install ansible --upgrade
            sudo apt autoremove
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            ### Check
            echo -e "\n"
            # echo "Check the env var TYPEORM_ENTITIES value:"
            echo "Contents  of the inventory.txt file is -------"
            echo -e "===================================="
            cat inventory.txt
            echo -e "===================================="
            ansible-playbook -i inventory.txt deploy-backend.yml
            ### Check
            echo -e "\n"
            echo "Check the env var TYPEORM_ENTITIES value:"
            echo -e "===================================="
            echo $TYPEORM_ENTITIES
            echo -e "===================================="
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2 

  smoke-test:
    docker:
      # Lightweight Docker image 
      ### container image did not work "node/19-alpine"
      - image: node:19-alpine
      # - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            # && pip3 install --upgrade pip \
            apk add --no-cache \
            ansible \
            tar \
            gzip \
            curl \
            nodejs \
            npm \
            curl \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip setuptools \
            && pip3 install --no-cache-dir awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            # ### ??? TEST ??? remove after testing
            # export API_URL="http://54.158.140.85:3030"
            ### Check
            echo -e "\n"
            echo "API_URL created from aws command is:"
            echo -e "===================================="
            echo $API_URL
            echo -e "===================================="
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            ### export API_URL=$(cat ~/project/frontend/.env)
            API_URL_ENV=$(cat ~/project/frontend/.env)
            API_URL=$(cat ~/project/frontend/.env | awk -F= {' print $2'})
            # ### ??? TEST ??? remove after testing
            # export API_URL=$(echo API_URL=http://54.208.38.16:3030 | awk -F= {' print $2'})
            ### Check
            echo -e "\n"
            echo "API_URL_ENV from workspace is:"
            echo -e "===================================="
            echo $API_URL_ENV
            echo -e "===================================="
            echo -e "\n"
            echo "API_URL from workspace through awk is:"
            echo -e "===================================="
            echo $API_URL
            echo -e "===================================="
            if  curl "$API_URL"/api/status | grep "ok"
              then
                return 0
              else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo -e "\n"
            echo "Frontend s3 URL is:"
            echo -e "===================================="
            echo ${URL}
            echo $URL
            echo -e "===================================="
            # if curl -s ${URL} | grep "Welcome"
            if curl -s $URL | grep "Welcome"
            then
            # Change this to 0 after the job fails
              # return 1
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
      - notify_on_failure
      - notify_on_success_2

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: node:19-alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            # yum install -y tar gzip
            apk add --no-cache \
            ansible \
            tar \
            gzip \
            curl \
            nodejs \
            npm \
            curl \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip setuptools \
            && pip3 install --no-cache-dir awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
      - notify_on_failure
      - notify_on_success_2

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # export OldWorkflowID="the id here"
            # export STACKS=[] #put the list of stacks here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            ### I added next line to get old bucket name 
            ALLBUCKETNAME=$(for bucket in $(aws s3api list-buckets --query 'Buckets[].Name' --output text); do   team_tag=$(aws s3api get-bucket-tagging --bucket $bucket --query 'TagSet[?Key==`Name`].Value' --output text 2>/dev/null);   if [[ $team_tag =~ ^(udapeople) ]]; then     echo $bucket;   fi; done)
            echo All_bucket_name: $ALLBUCKETNAME
            #export OLDBUCKETNAME=$(echo $ALLBUCKETNAME | grep -iv $OldWorkflowID)
            for i in $(echo $ALLBUCKETNAME);do if echo $i | grep -i "${CIRCLE_WORKFLOW_ID:0:7}"; then NEWBUCKETNAME=$i;else OLDBUCKETNAME=$i;fi;done
            export NEWBUCKETNAME=$(echo $NEWBUCKETNAME)
            export OLDBUCKETNAME=$(echo $OLDBUCKETNAME)
            echo New_bucket_name: $NEWBUCKETNAME
            echo Old_bucket_name: $OLDBUCKETNAME
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              ### next line will not delete the 1st manually created S3 bucket we created without WorkflowID
              #aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws s3 rm "s3://$OLDBUCKETNAME" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

######################################################
workflows:
  default:
    jobs:
      ### - notify:
      ###     context: slack-context
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup
          # requires: [cloudfront-update]