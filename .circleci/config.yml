version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

  notify_on_failure:
    description: Send SLACK notification on failure
    ### docker not allowed 
    # docker:
    #   - image: cimg/base:stable
    steps:
      - slack/notify:
          event: fail
          channel: udacity-advancedclouddevops-project3
          template: basic_fail_1

  notify_on_success:
    description: Send SLACK notification on Success using success_tagged_deploy_1 template
    # docker:
    #   - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: udacity-advancedclouddevops-project3
          ### template does not exist
          # template: success_tagged_deployment_1
          template: success_tagged_deploy_1
  
  notify_on_success_2:
    description: Send SLACK notification on Success using basic_success_1 template
    steps:
      - slack/notify:
          event: pass
          channel: udacity-advancedclouddevops-project3
          template: basic_success_1

######################################################
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Change directory to frontend, install npm modules, and build frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_success
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Change directory to backend, install npm modules, and build backend
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_success
      - notify_on_failure

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Change directory to frontend, and Run Unit test
          command: |
            cd frontend
            npm run test
      - notify_on_success
      - notify_on_failure

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Change directory to backend, and Run Unit test
          command: |
            cd backend
            npm run test
      - notify_on_success
      - notify_on_failure

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Change directory to frontend, and run Analyze audit security test 
          command: |
            cd frontend
            ### to fix frontend Analyze audit security test We add next line
            # sudo npm install npm@latest -g
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_success
      - notify_on_failure

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Change directory to backend, and run Analyze audit security test
          command: |
            cd backend
            ### to fix backend nalyze audit security test We add next line
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_success
      - notify_on_failure

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name=udapeople-backend-zakarya \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name=udapeople-frontend-zakarya \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            INSTANCEIP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text); echo $INSTANCEIP  >> /root/project/.circleci/ansible/inventory.txt
            ### check file contents
            echo "Instance IP is:"
            echo $INSTANCEIP
            echo -e "\n"
            echo "inventory.txt contents are"
            echo -e "===================================="
            cat /root/project/.circleci/ansible/inventory.txt
            echo -e "===================================="

            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
      # - image: ubuntu
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
        # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["11:53:17:01:57:4c:ec:06:6c:e5:27:10:4f:37:ef:ae"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # Install Ansible
            ### next line not installing aws command
            ### apk add --update ansible tar gzip aws-cli
            # apt-get update && apt-get install \
            # python3 \
            # py3-pip \
            # openssh-client \
            # openssh \
            apk add --no-cache \
            ansible \
            tar \
            gzip \
            curl \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir awscli \
            && rm -rf /var/cache/apk/*
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook .circleci/ansible/configure-server.yml -i /root/project/.circleci/ansible/inventory.txt
            ### If timeout then test connection while instance is running using:
            ### $ ansible web -i inventory.txt -m ping
            ### check user user with the ami 
            ### check firewalls
            # exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      ### Restore backend cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/Anc1rPpMcZEUgQfpcrRWGE/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            # exit 1
      ### save backend cache
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - notify_on_failure
      - notify_on_success_2

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

######################################################
workflows:
  default:
    jobs:
      # - notify:
      #     context: slack-context
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]